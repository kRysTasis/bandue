# Generated by Django 3.0.4 on 2020-05-28 14:13

import api.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='mUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=70, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=70, unique=True, verbose_name='Email')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('deleted', models.BooleanField(default=False, help_text='Designates whether the user was deleted or not', verbose_name='Delete Flag')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Thumbnail')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff Status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active Flag')),
                ('is_limited', models.BooleanField(default=False, help_text='Designates whether this user limit the view of the tweet', verbose_name='Limited Flag')),
                ('introduction', models.TextField(blank=True, null=True, verbose_name='Introduction')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Icon')),
                ('followees', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Community Name')),
            ],
        ),
        migrations.CreateModel(
            name='HashTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, verbose_name='Title')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name='Slug')),
            ],
        ),
        migrations.CreateModel(
            name='hUserUpd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=70, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=70, unique=True, verbose_name='Email')),
                ('password', models.CharField(max_length=128, verbose_name='Password')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='Address')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Upadate Date')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
            ],
        ),
        migrations.CreateModel(
            name='mAccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(blank=True, editable=False, null=True, verbose_name='Uuid')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True, verbose_name='IP Address')),
                ('device', models.CharField(max_length=50, verbose_name='Device')),
                ('page', models.URLField(max_length=500, verbose_name='Page')),
                ('browser', models.CharField(max_length=50, verbose_name='Browser')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='Access Time')),
                ('language', models.CharField(max_length=30, verbose_name='Language')),
            ],
        ),
        migrations.CreateModel(
            name='Tweet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('images', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Images')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Upadate Date')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('hashTag', models.ManyToManyField(blank=True, to='api.HashTag')),
                ('liked', models.ManyToManyField(blank=True, related_name='liked', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Tag')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('slug', models.SlugField(default=models.CharField(max_length=50, verbose_name='Tag'))),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Tweet')),
            ],
        ),
        migrations.CreateModel(
            name='mSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tweet_limit_level', models.IntegerField(choices=[(1, 'Public'), (2, 'Follower'), (3, 'Follower Who Follow Each Other')])),
                ('language', models.CharField(choices=[('JA', 'Japanese'), ('EN', 'English'), ('FR', 'French'), ('GE', 'German')], max_length=20)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('images', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('is_opened', models.BooleanField(default=False, help_text='Designates whether this message was opened by reveiver', verbose_name='Is Opened')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemberShip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invite_reason', models.CharField(max_length=100, verbose_name='Invites Reason')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Band')),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership_invites', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='hTweetUpd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('images', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Images')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Upadate Date')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('hashTag', models.ManyToManyField(blank=True, to='api.HashTag')),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('type', models.CharField(choices=[('RE', 'Recruitment Member'), ('JO', 'Join a Group'), ('SU', 'Support')], max_length=30)),
                ('prefecture', models.IntegerField(blank=True, choices=[(1, 'Hokkaido'), (2, 'Aomori Prefecture'), (3, 'Iwate Prefecture'), (4, 'Miyagi Prefecture'), (5, 'Akita Prefecture'), (6, 'Yamagata Prefecture'), (7, 'Fukushima Prefecture'), (8, 'Ibaraki Prefecture'), (9, 'Tochigi Prefecture'), (10, 'Gunma Prefecture'), (11, 'Saitama Prefecture'), (12, 'Chiba Prefecture'), (13, 'Tokyo Prefecture'), (14, 'Kanagawa Prefecture'), (15, 'Niigata Prefecture'), (16, 'Toyama Prefecture'), (17, 'Ishikawa Prefecture'), (18, 'Fukui Prefecture'), (19, 'Yamanashi Prefecture'), (20, 'Nagano Prefecture'), (21, 'Gifu Prefecture'), (22, 'Shizuoka Prefecture'), (23, 'Aichi Prefecture'), (24, 'Mie Prefecture'), (25, 'Shiga Prefecture'), (26, 'Kyoto Prefecture'), (27, 'Osaka Prefecture'), (28, 'Hyogo Prefecture'), (29, 'Nara Prefecture'), (30, 'Wakayama Prefecture'), (31, 'Tottori Prefecture'), (32, 'Shimane Prefecture'), (33, 'Okayama Prefecture'), (34, 'Hiroshima Prefecture'), (35, 'Yamaguchi Prefecture'), (36, 'Tokushima Prefecture'), (37, 'Kagawa Prefecture'), (38, 'Ehime Prefecture'), (39, 'Kochi Prefecture'), (40, 'Fukuoka Prefecture'), (41, 'Saga Prefecture'), (42, 'Nagasaki Prefecture'), (43, 'Kumamoto Prefecture'), (44, 'Oita Prefecture'), (45, 'Miyazaki Prefecture'), (46, 'Kagoshima Prefecture'), (47, 'Okinawa Prefecture')], null=True)),
                ('area', models.CharField(blank=True, max_length=20, null=True, verbose_name='Area')),
                ('day_week', models.CharField(blank=True, choices=[('WD', 'Weekdays'), ('WE', 'Weekends'), ('AL', 'Always')], max_length=20, null=True)),
                ('direction', models.CharField(blank=True, choices=[('OR', 'Original'), ('CO', 'Copy'), ('AL', 'All')], max_length=20, null=True)),
                ('part', models.TextField(blank=True, null=True, verbose_name='Part')),
                ('genre', models.TextField(blank=True, null=True, verbose_name='Genre')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='未分類', max_length=50, verbose_name='Category')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('slug', models.SlugField(default=models.CharField(default='未分類', max_length=50, verbose_name='Category'))),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Bbs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('images', models.ImageField(blank=True, null=True, upload_to=api.models.content_file_name, verbose_name='Images')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Upadate Date')),
                ('deleted', models.BooleanField(default=False, verbose_name='Delete Flag')),
                ('tag', models.ManyToManyField(blank=True, to='api.Tag')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='band',
            name='members',
            field=models.ManyToManyField(through='api.MemberShip', to=settings.AUTH_USER_MODEL),
        ),
    ]
